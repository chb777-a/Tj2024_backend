[예외 처리]
	1. 오류 종류
		1. 시스템 오류 : 시스템이 종료되는 수준의 심각한 문제
			- 프로그램 개발자가 예측하기 어렵고 제어가 힘든 메모리 관련 오류
		2. 예외 : 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생하는 문제
			- 시스템 오류와 달리 예측하여 제어가 가능하다. 경험 중요!!!
		
	2. 예외 종류
		1. 일반예외 : 컴파일러(번역)할 때 예외 처리 코드 여부를 검사하는 예외 , 에디터(이클립스 , vscode)에서 경고창 뜸
			- 입출력 예외 , 네트워크 , 파일 , JDBC(JAVA - DB 연동) 등등 , 주로 외부요소와 통신할 때 많이 뜸
		2. 실행예외 : 컴파일러(번역) 할 때 예외 처리 코드 여부를 검사하지 않는 예외
			- Null , 캐스팅 , 인덱스 등등 , 주로 개발자의 경험의 의존성이 큼 , 꼼꼼해야함
			
	3. 예외 처리 목적 : 비정상적인 프로그램 종료 방지 , 안전하게 24시간 실행되는 프로그램 , 유지보수
	
	4. 예외 처리 문법
		try{
			예외가 발생하거나 할 것 같은 (예측) 코드
		}catch(예외클래스명 변수명){
			(만약에) 예외가 발생했을 때 실행코드
		}catch(예외클래스명 변수명){
			(만약에) 예외가 발생했을 때 실행코드
		}
		
		* 다중 catch 가능!!!
		
	5. 예외 클래스
		- 예외가 발생했을 때 발생 이유와 정보가 저장되는 클래스 타입
		- 문제점을 저장하고 로그처리하며 추후에 유지보수 사용된다.
		1. Exception 클래스 : 예외 처리 클래스중에 슈퍼클래스
			- 일반 예외 :
				- ClassNotFoundException
				- IOException
				등등등등등등
			
			- 실행 예외